;+
; NAME:
;  InitLayer_LIF()
;
; VERSION:
;  $Id$
;
; AIM:
;  Initialize layer of Leaky Integrate and Fire Neurons.
;
; PURPOSE:
;  Initialize a rectangular grid of Leaky Integrate and Fire Neurons.
;  The call of <*>InitLayer_LIF</*> may be substituted by calling the
;  wrapper procedure <A>InitLayer</A>.
;
; CATEGORY:
;  Layers
;  NASE
;  Simulation
;
; CALLING SEQUENCE:
;* layer_hdl = InitLayer_LIF( WIDTH=..., HEIGHT=..., TYPE=... )
;
; INPUT KEYWORDS:
;  WIDTH:: Number of neurons in one row of the layer.
;  HEIGHT:: Number of neurons in one column of the layer.
;  TYPE:: Structure generated by <A>InitPara_LIF</A> containing neuron
;         parameters.
;
; OUTPUTS:
;  layer_hdl:: Handle pointing to a structure containing the following
;              tags:
;*              info   : 'LAYER'
;*              type   : 'LIF'
;*              w      : width
;*              h      : height
;*              para   : type
;*              decr: 1; decides if potentials are to be decremented or not
;*              f: type.ns*Double(RandomU(seed,width*height))
;*              l: type.ns*Double(RandomU(seed,width*height))
;*              i: type.ns*Double(RandomU(seed,width*height))
;*              m: DblArr(width*height)
;*              s: DblArr(width*height); keep S to allow plotting of threshold
;*              o: handle to output}
;*
;
; COMMON BLOCKS:
;  common_random
;
; EXAMPLE:
;* demolayer = InitLayer_LIF(HEIGHT=5, WIDTH=5, TYPE=demopara)
; See also <A>DemoSim</A> for general use of <A>InitLayer</A>.
;
; SEE ALSO:
;  <A>InitLayer()</A>, <A>InitPara_LIF()</A>, <A>InputLayer_LIF</A>,
;  <A>ProceedLayer_LIF</A>.
;
;-



FUNCTION InitLayer_LIF, WIDTH=width, HEIGHT=height, TYPE=type

   COMMON Common_Random, seed


   IF (NOT Keyword_Set(width))  THEN Message, 'Keyword WIDTH expected'
   IF (NOT Keyword_Set(height)) THEN Message, 'Keyword HEIGHT expected'
   IF (NOT Keyword_Set(type))   THEN Message, 'Keyword TYPE expected'


   handle = Handle_Create(!MH, VALUE=[0, width*height])

   Layer = {info   : 'LAYER', $
            Type   : 'LIF'                  ,$
            w      : width                ,$
            h      : height               ,$
            para   : type                 ,$
            decr: 1, $ ; decides if potentials are to be decremented or not
            F: type.ns*Double(RandomU(seed,width*height)), $
            L: type.ns*Double(RandomU(seed,width*height)), $
            I: type.ns*Double(RandomU(seed,width*height)), $
            M: DblArr(width*height), $
            S: DblArr(width*height), $ ; keep S to allow plotting of threshold
            O: handle}

   
   RETURN, Handle_Create(!MH, VALUE=Layer, /NO_COPY)

END 
